<?php

/**
 * Implements hook_workbench_moderation_transition().
 */
function field_collection_wbm_workbench_moderation_transition($node, $previous_state, $new_state) {
  // If node is not published then everything tracks latest revision.
  if (!isset($node->workbench_moderation['published'])) {
    return;
  }
  
  if (isset($node->original)) {
    // Saved from node form.
    $host_entity = $node->original;
    $default = $previous_state == workbench_moderation_state_published();
  }
  else {
    // Triggered by moderation action.
    $host_entity = $node;
    $default = $new_state == workbench_moderation_state_published();
  }
  
  // Find all field collection fields on the original host node.
  foreach (field_info_instances('node', $node->type) as $field_name => $value) {
    $field_info = field_info_field($field_name);
    if ($field_info['type'] == 'field_collection' && ($collections = field_get_items('node', $host_entity, $field_name))) {
      foreach ($collections as $delta => $collection) {
        // Load each field collection entity.
        $entities = entity_load(
          'field_collection_item', 
          array($collection['value']),
          array('revision_id' => array($collection['revision_id']))
        );
        
        foreach ($entities as $entity) {
          // Set default revision state.
          $entity->default_revision = $default;
          
          // Don't save a new revision.
          $entity->revision = 0;
          
          // Save without saving the host node.
          $entity->save(TRUE);
        }
      }
    }
  }
}

/**
 * Implements hook_field_collection_field_update_delete_alter().
 */
function field_collection_wbm_field_collection_field_update_delete_alter($host_entity, $items, &$original_by_id) {
  // Prevent field_collection_field_update() deleting new items.
  if (!empty($host_entity->workbench_moderation['updating_live_revision'])) {
    $original_by_id = FALSE;
  }
}